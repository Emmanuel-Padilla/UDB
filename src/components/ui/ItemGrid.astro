---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, classes: itemClasses = {}, mapSrc }) => (
            <div class="intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
              <div class={twMerge('flex flex-row max-w-md', panelClass, itemClasses?.panel)}>
                <div class="flex justify-center">
                  {(icon || defaultIcon) && (
                    <Icon
                      name={icon || defaultIcon}
                      class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', defaultIconClass, itemClasses?.icon)}
                    />
                  )}
                </div>
                <div class="mt-0.5">
                  {title && <h3 class={twMerge('text-xl font-bold dark:text-white', titleClass, itemClasses?.title)} data-translate={title}>{title}</h3>}
                  {description && (
                    <p
                      class={twMerge(`${title ? 'mt-3 dark:text-white' : 'dark:text-white'} text-muted dark:text-white`, descriptionClass,  itemClasses?.description)}
                      data-translate={description} set:html={description}
                    />
                  )}
                  {callToAction && (
                    <div class={twMerge(`${title || description ? 'mt-3' : ''}`, actionClass, itemClasses?.actionClass)}>
                      <Button variant="link" {...callToAction} />
                    </div>
                  )}
                  {mapSrc && (
                    <iframe 
                      class="map relative shadow-2x1"
                      src={mapSrc} 
                      width="600" 
                      height="350" 
                      style="border:0;" 
                      allowfullscreen="" 
                      loading="lazy" 
                      referrerpolicy="no-referrer-when-downgrade"
                    >
                    </iframe>  
                  )}
                </div>
              </div>
            </div>
      ))}
    </div>
  )
}

<style>
  @media only screen and (max-width: 1024px) {
    section {
      display: flex;
      flex-direction: column;
      padding-top: 10px;
    }
    .map {
      max-width: 100%;
    }
    .info-container {
      padding: 10px 0px;
    }

    .data-element {
      margin: 20px 2px;
    }

    .space {
      margin-bottom: 5vh;
    }
  }
</style>
