---
import Headline from '~/components/ui/Headline.astro';
import ItemGrid from '~/components/ui/ItemGrid.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import type { Features as Props } from '~/types';
import MapsGrid from '../ui/mapsGrid.astro';
import Button from '~/components/ui/Button.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  image,
  actions = await Astro.slots.render('actions'),
  items = [],
  columns,
  defaultIcon,
  isBeforeContent,
  isAfterContent,
  mapas,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`${isBeforeContent ? 'md:pb-8 lg:pb-12' : ''} ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${
    classes?.container ?? ''
  }`}
  bg={bg}
>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />

  <div aria-hidden="true" class="aspect-w-16 aspect-h-7">
    {
      image && (
        <div class="max-w-4xl mx-auto p-6 rounded-xl shadow-lg overflow-hidden">
          {typeof image === 'string' ? (
            <Fragment set:html={image} />
          ) : (
            <Image
              class="w-full h-[400px] rounded-xl object-cover"
              width={800}  
              height={400}  
              layout="responsive"
              {...image}
            />
          )}
        </div>
      )
    }
    
<span class="w-4/12 lg:w-2/12 aspect-square bg-gradient-to-tr from-primary to-purple-500 absolute -top-8 lg:rigth-10 rounded-full skew-y-12 blur-2xl opacity-40 skew-x-12 rotate-90"></span>
<span class="absolute -top-4 md:top-10 right-10 lg:right-16 w-32 h-32 rotate-60 skew-x-8 rounded-3xl bg-purple-800 blur-xl opacity-50 lg:opacity-85 lg:block hidden"></span>
<span class="absolute -left-12 md:left-8 top-16 lg:top-24 w-20 h-20 rotate-120 skew-x-10 rounded-3xl bg-purple-500 blur-xl opacity-75 lg:opacity-80 lg:block hidden"></span>
<span class="absolute left-6 md:left-10 top-20 lg:top-32 w-26 h-26 rotate-30 skew-x-4 rounded-3xl bg-purple-300 blur-xl opacity-65 lg:opacity-95 lg:block hidden"></span>

    {
      actions && (
        <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter">
          {Array.isArray(actions) ? (
            actions.map((action) => (
              <div class="flex w-full sm:w-auto">
                <Button {...(action || {})} class="w-full sm:mb-0"
                data-translate={action.text}/>
              </div>
            ))
          ) : (
            <Fragment set:html={actions} />
          )}
        </div>
      )
    }
  </div>
  {
    mapas ? (
      <MapsGrid
        items={items}
        columns={columns}
        defaultIcon={defaultIcon}
        classes={{
          container: 'mt-12',
          panel: 'max-w-full sm:max-w-md transition-transform duration-300 transform hover:scale-105 hover:bg-[#D8B4E2] hover:shadow-lg rounded-lg p-4',
          title: 'text-lg font-semibold dark:text-white hover:text-white hover:underline',
          description: 'mt-0.5 dark:text-white',
          icon: 'flex-shrink-0 mt-1 text-primary w-6 h-6',
          ...((classes?.items as object) ?? {}),
        }}
      />
    ):(
      <ItemGrid
        items={items}
        columns={columns}
        defaultIcon={defaultIcon}
        classes={{
          container: 'mt-12',
          panel: 'max-w-full sm:max-w-md transition-transform duration-300 transform hover:scale-105 hover:bg-gradient-to-r from-[#D8B4E2]  to-[#C8A2C8] hover:shadow-lg rounded-lg p-4',

          title: 'text-lg font-semibold dark:text-white hover:text-white hover:underline',
          description: 'mt-0.5 dark:text-white',
          icon: 'flex-shrink-0 mt-1 text-primary w-6 h-6',
          ...((classes?.items as object) ?? {}),
        }}
      />
    )
  }
</WidgetWrapper>
